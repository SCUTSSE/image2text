实训合作项目需求分析

将常见格式的图片转换成字符画(灰度图)
1.前期工作：
（1）常见ASCII (33-126) 转图片格式 
（2）分析转换后图片灰度 (BlackPixel)/AllPixel 
（3）统计每个字符灰度值，分组 
2.主要功能:
（1）读入一张常见格式的图片 
（2）得到所有像素点的RGB值 
（3）根据预设算法计算该点灰度 -> vector<vector<Vec3b>>
 预设算法:
1）选取矩形块(比如1*1，2*3)，边界处理 ->可以顺带实现图像的压缩 
2）计算每个矩形块的颜色平均值(当前块所有Pixel的[R,G,B]/(块数)) 
3）计算每个矩形块的灰度(灰度公式) -> 转灰算法 
（4）使用以上预先计算灰度的字符匹配替换
       输出字符画(txt,html)。

（一）字符转灰度
    任何颜色都由红、绿、蓝三基色组成，假如原来某点的颜色为RGB(R，G，B)，那么，我们可以通过下面几种方法，将其转换为灰度：
1.浮点算法：Gray=R*0.3+G*0.59+B*0.11
2.整数方法：Gray=(R*30+G*59+B*11)/100
3.移位方法：Gray =(R*77+G*151+B*28)>>8;
4.平均值法：Gray=（R+G+B）/3;
5.仅取绿色：Gray=G；
通过上述任一种方法求得Gray后，将原来的RGB(R,G,B)中的R,G,B统一用Gray替换，形成新的颜色RGB(Gray,Gray,Gray)，用它替换原来的RGB(R,G,B)就是灰度图了。
（二）字库转图片
C++没有找到跨平台支持文字转图片的库/函数，但是有传统思路是TextOut到DC上，再把DC存成BMP，比较跨平台的做法不能用C++，用Python的Pygame库（ Pygame是一个利用SDL库的写就的游戏库）跨平台支持任意字符转图片。这样灰度选择就变成来源不明的magic number了。
（1）	TextOut函数原型
1
2
3
4
5
6
7	BOOL TextOut(
HDC hdc, // 设备描述表句柄
int nXStart, // 字符串的开始位置 x坐标
int nYStart, // 字符串的开始位置 y坐标
LPCTSTR lpString, // 字符串
int cbString // 字符串中字符的个数
);
     （2）DC保存至BMP图像，可参考CSDN上大佬的文档，比较长，网址如下：
https://blog.csdn.net/desow/article/details/4558776

   （三）黑白灰度计算
 （1）C++跨平台库OpenCV可以读出一张图全部RGB，可以方便的计算白色和黑色各占多少。
图片转灰度（C++）
利用OpenCV的函数将彩色图像转为灰度图像：(参考https://www.cnblogs.com/zkwarrior/p/4871114.html)
（2）颜色灰度计算：（基础公式）Gray = R*0.299 + G*0.587 + B*0.114
 找到一些看上去比较成熟的RGB转换算法，参考一下：
1)整数算法
　　而实际应用时，希望避免低速的浮点运算，所以需要整数算法。
　　注意到系数都是3位精度的没有，我们可以将它们缩放1000倍来实现整数运算算法：
  Gray = (R*299 + G*587 + B*114 + 500) / 1000
　　RGB一般是8位精度，现在缩放1000倍，所以上面的运算是32位整型的运算。注意后面那个除法是整数除法，所以需要加上500来实现四舍五入。
　　就是由于该算法需要32位运算，所以该公式的另一个变种很流行：Gray = (R*30 + G*59 + B*11 + 50) / 100
　　但是，虽说上一个公式是32位整数运算，但是根据80x86体系的整数乘除指令的特点，是可以用16位整数乘除指令来运算的。而且现在32位早普及了（AMD64都出来了），所以推荐使用上一个公式。
2)整数移位算法
　　上面的整数算法已经很快了，但是有一点仍制约速度，就是最后的那个除法。移位比除法快多了，所以可以将系数缩放成 2的整数幂.习惯上使用16位精度，2的16次幂是65536，所以这样计算系数：
0.299 * 65536 = 19595.264 ≈ 19595
0.587 * 65536 + (0.264) = 38469.632 + 0.264 = 38469.896 ≈ 3846
 0.114 * 65536 + (0.896) = 7471.104 + 0.896 = 7472
　　可能很多人看见了，我所使用的舍入方式不是四舍五入。四舍五入会有较大的误差，应该将以前的计算结果的误差一起计算进去，舍入方式是去尾法：
　　写成表达式是：
   Gray = (R*19595 + G*38469 + B*7472) >> 16
　　2至20位精度的系数：
   Gray = (R*1 + G*2 + B*1) >> 2
   Gray = (R*2 + G*5 + B*1) >> 3
   Gray = (R*4 + G*10 + B*2) >> 4
   Gray = (R*9 + G*19 + B*4) >> 5
    Gray = (R*19 + G*37 + B*8) >> 6
    Gray = (R*38 + G*75 + B*15) >> 7
   Gray = (R*76 + G*150 + B*30) >> 8
   Gray = (R*153 + G*300 + B*59) >> 9
   Gray = (R*306 + G*601 + B*117) >> 10
   Gray = (R*612 + G*1202 + B*234) >> 11
   Gray = (R*1224 + G*2405 + B*467) >> 12
    Gray = (R*2449 + G*4809 + B*934) >> 13
   Gray = (R*4898 + G*9618 + B*1868) >> 14
   Gray = (R*9797 + G*19235 + B*3736) >> 15
    Gray = (R*19595 + G*38469 + B*7472) >> 16
   Gray = (R*39190 + G*76939 + B*14943) >> 17
   Gray = (R*78381 + G*153878 + B*29885) >> 18
      Gray = (R*156762 + G*307757 + B*59769) >> 19
   Gray = (R*313524 + G*615514 + B*119538) >> 20
　　 其实最有意思的还是那个2位精度的，完全可以移位优化：
Gray = (R + (WORD)G<<1 + B) >> 2
颜色平均值计算： RGB函数计算公式:颜色值    ＝    (65536    *    Blue)    +    (256    *    Green)    +    (Red（参考http://www.cppblog.com/finehai/archive/2009/09/17/96575.aspx）

(四)图片大小转换（长度与宽度）：用java或者C++写（图片拉伸有OpenCV库原生跨平台支持）

